plugins {
    id 'java'
    id 'idea'
    id 'org.springframework.boot' version "${springBootVersion}"
    id 'io.spring.dependency-management' version "${springDependencyManagementVersion}"
    id 'com.gorylenko.gradle-git-properties' version "${gitPropertiesVersion}"
    id 'com.google.cloud.tools.jib' version "${jibVersion}"
    id 'org.openapi.generator' version "${openapiGeneratorVersion}"
    id 'io.freefair.lombok' version "${lombokVersion}"
    id 'com.github.ben-manes.versions' version "${versionManagerVersion}"
    id 'com.avast.gradle.docker-compose' version "${dockerComposeVersion}"
}

apply from: 'gradle/docker.gradle'
apply from: 'gradle/swagger.gradle'

group = '{{groupName}}'
version = project.version
sourceCompatibility = '{{javaVersion}}'

repositories {
    {{#ifVroongProject projectType}}maven {
        url 'https://nexus.mm.meshkorea.net/repository/maven-public/'

        credentials {
            username repoUser
            password repoPass
        }
    }{{/ifVroongProject}}

    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
}

dependencies {

    /**
     * BOM, dependency management
     */

    implementation platform("org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}")
    implementation platform("org.zalando:logbook-bom:${logbookVersion}");

    /**
     * Global utilities
     */

    implementation 'org.apache.commons:commons-lang3:3.10'
    annotationProcessor('org.springframework.boot:spring-boot-configuration-processor') {
        exclude group: 'com.vaadin.external.google', module: 'android-json'
    }
    implementation "org.mapstruct:mapstruct:${mapstructVersion}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"

    /**
     * Inbound adapters
     */

    // web
    implementation('org.springframework.boot:spring-boot-starter-web') {
        exclude module: 'spring-boot-starter-tomcat'
    }
    implementation 'org.springframework.boot:spring-boot-starter-undertow'

    // open-api-spec support packages
    implementation 'io.springfox:springfox-swagger2:3.0.0'
    implementation 'org.openapitools:jackson-databind-nullable:0.2.1'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-hibernate5'
    // OpenApi Bug workaround @see https://github.com/OpenAPITools/openapi-generator/issues/3668
    implementation 'io.swagger:swagger-annotations:1.5.17'

    // object validation
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // RFC 7807  Problem Details for HTTP APIs
    // @see https://github.com/zalando/problem-spring-web/tree/main/problem-spring-web
    implementation "org.zalando:problem-spring-web-starter:${problemWebVersion}"

    // scheduler lock @see https://github.com/lukas-krecan/ShedLock
    implementation "net.javacrumbs.shedlock:shedlock-spring:${shedlockVersion}"
    implementation "net.javacrumbs.shedlock:shedlock-provider-jdbc-template:${shedlockVersion}"

    /**
     * Outbound adapters
     */

    // jpa & database drivers
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.hibernate:hibernate-jpamodelgen'
    annotationProcessor 'org.hibernate:hibernate-jpamodelgen'
    implementation 'mysql:mysql-connector-java'
    testImplementation 'com.h2database:h2'

    // querydsl
    implementation "com.querydsl:querydsl-core:${queryDslVersion}"
    implementation "com.querydsl:querydsl-jpa:${queryDslVersion}"
    annotationProcessor(
            "com.querydsl:querydsl-apt:${queryDslVersion}:jpa",
            'jakarta.persistence:jakarta.persistence-api',
            'jakarta.annotation:jakarta.annotation-api'
    )

    // messaging
    implementation 'org.springframework.cloud:spring-cloud-stream'
    implementation 'org.springframework.cloud:spring-cloud-stream-binder-kafka'
    testImplementation 'org.springframework.cloud:spring-cloud-stream-test-support'

    /**
     * Microservice patterns
     */

    // 헬스체크 패턴
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    // 로깅 및 추적 패턴
    implementation 'org.springframework.cloud:spring-cloud-starter-sleuth'

    // sentry
    // @see https://docs.sentry.io/platforms/java/guides/logback/
    implementation 'io.sentry:sentry-logback:5.4.1'

    // logback extension
    implementation "net.logstash.logback:logstash-logback-encoder:${logstashLogbackEncoderVersion}"
    implementation 'ch.qos.logback.contrib:logback-json-classic:0.1.5'

    // logbook - http request & response logging
    // @see https://github.com/zalando/logbook
    implementation 'org.zalando:logbook-spring-boot-starter'

    // 보안 패턴

    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    testImplementation 'org.springframework.security:spring-security-test'

    /**
     * Test
     */

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
        exclude group: 'com.vaadin.external.google', module: 'android-json'
    }
    testImplementation 'com.tngtech.archunit:archunit-junit5-api:0.23.1'
    testRuntimeOnly 'com.tngtech.archunit:archunit-junit5-engine:0.23.1'
}

// QueryDSL Class Generate Script to avoid lombok error {start}
// @see https://jojoldu.tistory.com/372#gradle-50-이상--intellij-2020x-사용시
def generated='src/main/generated'

sourceSets {
    main.java.srcDirs += [ generated ]
}

tasks.withType(JavaCompile) {
    options.annotationProcessorGeneratedSourcesDirectory = file(generated)
}

clean.doLast {
    file(generated).deleteDir()
}
// QueryDSL Class Generate Script to avoid lombok error {end}

if (!org.gradle.internal.os.OperatingSystem.current().isWindows()) {
    processResources {
        filesMatching(['**/application.yml', '**/sentry.properties']) {
            filter {
                it.replace('#project.version#', version)
            }
        }
    }
}

compileJava {
    options.compilerArgs = [
            '-Amapstruct.suppressGeneratorTimestamp=true',
            '-Amapstruct.suppressGeneratorVersionInfoComment=true',
            '-Amapstruct.unmappedTargetPolicy=IGNORE'
    ]
}

test {
    useJUnitPlatform()
    systemProperty('spring.profiles.active', 'test')
    systemProperty('user.timezone', 'Asia/Seoul')
}
