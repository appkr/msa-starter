def getGitHash = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

jib {
    from {
        image = '{{dockerImage}}'
    }
{{#ifVroongProject projectType}}
    extraDirectories {
        paths {
            path {
                from = file('docker/newrelic')
                into = '/newrelic'
            }
            path {
                from = file('docker/jmx-exporter')
                into = '/jmx-exporter'
            }
        }
    }
{{/ifVroongProject}}

    to {
        image = "${project.name}"
        tags = ['latest', "${project.version}".toString(), getGitHash()]
    }

    // If set to packaged, puts the JAR artifact built by the Gradle Java plugin into the final image.
    // If set to exploded (default), containerizes individual .class files and resources files.
    containerizingMode = 'packaged'

    container {
        jvmFlags = [
{{#ifJava11 javaVersion}}
                // Java9 container support @see https://www.eclipse.org/openj9/docs/xxusecontainersupport/
                '-XX:+UseContainerSupport',
{{/ifJava11}}
                // for G1GC @see https://www.oracle.com/technical-resources/articles/java/g1gc.html
                '-XX:+UseG1GC',
                '-XX:+HeapDumpOnOutOfMemoryError',
                '-XX:HeapDumpPath=/tmp',
                '-Djava.net.preferIPv4Stack=true',
                '-Duser.timezone=Asia/Seoul',
                '-Dfile.encoding=UTF8',
                '-Dsun.net.inetaddr.ttl=30',
{{#ifVroongProject projectType}}
                '-javaagent:/newrelic/newrelic.jar',
                '-javaagent:/jmx-exporter/jmx_prometheus_javaagent-0.13.0.jar=8888:/jmx-exporter/config.yml',
{{/ifVroongProject}}
        ]
        ports = ['{{portNumber}}']
        creationTime = 'USE_CURRENT_TIMESTAMP'
    }
}

task down(type:Exec) {
    commandLine '/usr/local/bin/docker-compose', '-f', 'docker/docker-compose.yml', 'down'
}

task up(type:Exec) {
    dependsOn down
    commandLine '/usr/local/bin/docker-compose', '-f', 'docker/docker-compose.yml', 'up'
}

// How to start a cluster including "jhipster-uaa"
//
// Build "jhipster-uaa" docker image
//   ~/jhipster-uaa $ ./gradlew clean jibDockerBuild
//   ~ $ docker image ls | grep uaa
//   # uaa  latest  f50dc363f133    xx minutes ago  305MB
//
// Run the cluster
//   ~/{{projectName}} $ ./gradlew clusterUp
task clusterDown(type:Exec) {
    commandLine '/usr/local/bin/docker-compose', '-f', 'docker/cluster-compose.yml', 'down'
}

task clusterUp(type:Exec) {
    dependsOn clusterDown
    commandLine '/usr/local/bin/docker-compose', '-f', 'docker/cluster-compose.yml', 'up'
}
