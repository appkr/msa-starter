@startuml

' print help message
' inject sub-command
class MsaStarter {
  + {static} main()
  + createGenerateCommand(): GenerateCommand
  - isRunningInJar(): boolean
  - isRunningInNative(): boolean
}

interface Callable {
  + call(): Integer
}

' generate a new project
abstract class GenerateCommand implements Callable {
  # {static} mf: MustacheFactory
  # targetDir: String
  # buildInfo: BuildInfo
  + {abstract} getTemplateDir(): String
  + {abstract} setTemplateDir(seedDir: String): void
  + {abstract} listDir(): Stream<Path>
  + {abstract} copyFile(srcPath: Path, destPath: Path): void
  + {abstract} renderTemplate(templatePath: String, writePath: String): void
  # getBuildInfo(): void
  # shouldSkip(path: String): boolean
  # calculateTargetFilenameFrom(aTemplatePath: String): String
}

class GenerateCommandForNative implements GenerateCommand {
  - templateDir: String
}
class GenerateCommandForJar implements GenerateCommand {
  - templateDir: String
}
class GenerateCommandForGradle implements GenerateCommand {
  - templateDir: String
}

' publish the generated project
class PublishCommand implements Callable {
  - sourceDir: String
  - targetDir: String
}

class BuildInfo {
  - {static}EXAMPLE_FILES: List<String>
  - isArm: boolean
  - isReactiveProject: boolean
  - isVroongProject: boolean
  - includeExample: boolean
  - javaVersion: String
  - projectName: String
  - groupName: String
  - packageName: String
  - portNumber: String
  - mediaType: String
  - dockerImage: String
  - skipTokens: List<String>
  + mergeSkipTokensWithExamples(): void
}

MsaStarter --> GenerateCommand
MsaStarter --> PublishCommand
GenerateCommand --> BuildInfo

@enduml
