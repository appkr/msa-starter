{
	"info": {
		"_postman_id": "ac6e12c6-647a-44d7-be9d-966726dee135",
		"name": "example_ReactiveWeb",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "736341"
	},
	"item": [
		{
			"name": "api",
			"item": [
				{
					"name": "albums",
					"item": [
						{
							"name": "getAlbum",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "bearer \{{accessToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "\{{baseUrl}}/api/albums/1",
									"host": [
										"\{{baseUrl}}"
									],
									"path": [
										"api",
										"albums",
										"1"
									]
								},
								"description": "List Albums"
							},
							"response": []
						}
					]
				},
				{
					"name": "songs",
					"item": [
						{
							"name": "createSong",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.vroong.private.v1+json"
									},
									{
										"key": "Authorization",
										"value": "bearer \{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"가로수 그늘아래 서면\",\n    \"album\": {\n        \"albumId\": 1\n    }\n}"
								},
								"url": {
									"raw": "\{{baseUrl}}/api/songs",
									"host": [
										"\{{baseUrl}}"
									],
									"path": [
										"api",
										"songs"
									]
								},
								"description": "Create a Song"
							},
							"response": []
						},
						{
							"name": "listSongs",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "bearer \{{accessToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "\{{baseUrl}}/api/songs",
									"host": [
										"\{{baseUrl}}"
									],
									"path": [
										"api",
										"songs"
									]
								},
								"description": "Get Song"
							},
							"response": []
						},
						{
							"name": "updateSong",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.vroong.private.v1+json"
									},
									{
										"key": "Authorization",
										"value": "bearer \{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"Changed title\"\n}"
								},
								"url": {
									"raw": "\{{baseUrl}}/api/songs/1",
									"host": [
										"\{{baseUrl}}"
									],
									"path": [
										"api",
										"songs",
										"1"
									]
								},
								"description": "Create a Song"
							},
							"response": []
						},
						{
							"name": "deleteSong",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.vroong.private.v1+json"
									},
									{
										"key": "Authorization",
										"value": "bearer \{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"Changed title\"\n}"
								},
								"url": {
									"raw": "\{{baseUrl}}/api/songs/1",
									"host": [
										"\{{baseUrl}}"
									],
									"path": [
										"api",
										"songs",
										"1"
									]
								},
								"description": "Create a Song"
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "loginWithClientCredential",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const res = pm.response.json();",
							"pm.environment.set('accessToken', res.access_token);",
							"pm.environment.set('refreshToken', res.refresh_token);",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const seed = CryptoJS.enc.Utf8.parse('internal:internal');",
							"const basicAuthString = CryptoJS.enc.Base64.stringify(seed);",
							"pm.environment.set(\"basicAuthString\", basicAuthString);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded"
					},
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Basic  \{{basicAuthString}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "\{{authHost}}/oauth/token?grant_type=client_credentials",
					"host": [
						"\{{authHost}}"
					],
					"path": [
						"oauth",
						"token"
					],
					"query": [
						{
							"key": "grant_type",
							"value": "client_credentials"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "loginAsUser",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const res = pm.response.json();",
							"pm.environment.set('accessToken', res.access_token);",
							"pm.environment.set('refreshToken', res.refresh_token);",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const seed = CryptoJS.enc.Utf8.parse(pm.environment.get(\"clientId\")+\":\"+pm.environment.get(\"clientSecret\"));",
							"const basicAuthString = CryptoJS.enc.Base64.stringify(seed);",
							"pm.environment.set(\"basicAuthString\", basicAuthString);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded"
					},
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"type": "text",
						"value": "Basic \{{basicAuthString}}"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "grant_type",
							"value": "password",
							"type": "text"
						},
						{
							"key": "username",
							"value": "\{{username}}",
							"type": "text"
						},
						{
							"key": "password",
							"value": "\{{password}}",
							"type": "text"
						},
						{
							"key": "scope",
							"value": "openid",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "\{{authHost}}/oauth/token",
					"host": [
						"\{{authHost}}"
					],
					"path": [
						"oauth",
						"token"
					]
				}
			},
			"response": []
		},
		{
			"name": "health",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// Functions",
							"",
							"/**",
							" * Calculate basicAuthString",
							" */",
							"function basicAuthString() {",
							"    let seed = CryptoJS.enc.Utf8.parse(pm.environment.get(\"client_id\") + \":\" + pm.environment.get(\"client_secret\"));",
							"    return CryptoJS.enc.Base64.stringify(seed);",
							"}",
							"",
							"/**",
							" * Generate an UUID v4",
							" * @see https://noritersand.github.io/javascript/2019/04/19/javascript-uuid-%EC%83%9D%EC%84%B1-%ED%95%A8%EC%88%98/",
							" */",
							"function uuidv4() {",
							"  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {",
							"    var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);",
							"    return v.toString(16);",
							"  });",
							"}",
							"",
							"/**",
							" * Calculate date value fo today",
							" * @var diff: int days to plus or minus",
							" * @return string e.g. \"2020-01-01\"",
							" */",
							"function today(diff) {",
							"    diff = parseInt(diff);",
							"    loop = Math.abs(diff);",
							"    let now = new Date();",
							"    if (diff !== undefined || diff !== 0) {",
							"        for (i = 0; i < loop; i++) {",
							"            (diff > 0) ",
							"                ? now.setDate(now.getDate() + 1) ",
							"                : now.setDate(now.getDate() - 1);",
							"        }",
							"    }",
							"    return now;",
							"}",
							"",
							"/**",
							" * Generate random string",
							" * ",
							" * @var len: int length of string",
							" */",
							"function randomString(len) {",
							"    return Math.random().toString(36).substring(len);",
							"}",
							"",
							"/**",
							" * Generate random number",
							" * @return int",
							" */",
							"function randomNumber() {",
							"    return parseInt(Math.random() * 100000);",
							"}",
							"",
							"/**",
							" * Calculate random double",
							" * ",
							" * min: int",
							" * max: int",
							" */",
							"function randomInRange(min, max) {",
							"    return Math.random() < 0.5 ",
							"        ? ((1-Math.random()) * (max-min) + min).toFixed(2) ",
							"        : (Math.random() * (max-min) + min).toFixed(2);",
							"}",
							"",
							"/**",
							" * Generate random location",
							" * @return object {",
							" *   @var lat: double ",
							" *   @var lng: double",
							" * }",
							" */",
							"function randomLocation() {",
							"    return {",
							"        lat: (Math.random() * (36.0 - 38.0) + 36.0).toFixed(6),",
							"        lng: (Math.random() * (126.0 - 128.0) + 126.0).toFixed(6)",
							"    };",
							"}",
							"",
							"// Declarations",
							"",
							"const address = {",
							"    postalCode: \"06193\",",
							"    baseAddress: \"서울 강남구 테헤란로 418\",",
							"    detailedAddress: \"13층\",",
							"    roadAddress: null,",
							"    jibunAddress: null,",
							"    lat: \"37.50510340\",",
							"    lng: \"127.05224580\"",
							"};",
							"",
							"pm.environment.set('address', JSON.stringify(address));",
							"pm.environment.set('randomDouble', randomInRange(1, 10));",
							"pm.environment.set(\"basicAuthString\", basicAuthString());",
							"pm.environment.set(\"uuid\", uuidv4());",
							"pm.environment.set('now', new Date().toISOString());",
							"pm.environment.set('today', today().toISOString().slice(0,10));",
							"pm.environment.set('yesterday', today(-1).toISOString().slice(0,10));",
							"pm.environment.set('dayBeforeYesterday', today(-2).toISOString().slice(0,10));",
							"pm.environment.set('randomString', randomString(7));",
							"pm.environment.set('randomDeviceId', randomString(16));",
							"pm.environment.set('randomFcmRegistrationId', randomString(16).toString(36).repeat(5));",
							"pm.environment.set('randomNumber', randomNumber());",
							"pm.environment.set('randomLat', randomLocation().lat);",
							"pm.environment.set('randomLng', randomLocation().lng);",
							"pm.environment.set('baseAddress', address.baseAddress);",
							"pm.environment.set('detailedAddress', address.detailedAddress);",
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "\{{baseUrl}}/management/health",
					"host": [
						"\{{baseUrl}}"
					],
					"path": [
						"management",
						"health"
					]
				}
			},
			"response": []
		},
		{
			"name": "info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "\{{baseUrl}}/management/info",
					"host": [
						"\{{baseUrl}}"
					],
					"path": [
						"management",
						"info"
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:{{portNumber}}",
			"type": "string"
		}
	]
}