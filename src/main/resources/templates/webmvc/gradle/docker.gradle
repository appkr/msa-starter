def getGitHash = { ->
    def gitPropertyFile = file("${buildDir}/resources/main/git.properties")
    // if statement used to WORKAROUND in gradle build: A problem occurred evaluating script.
    //> .../build/resources/main/git.properties (No such file or directory)
    if (gitPropertyFile.exists()) {
        def props = new Properties()
        gitPropertyFile.withInputStream { props.load(it) }
        return props.getProperty('git.commit.id.abbrev', 'unknown')
    }

    return 'unknown'
}

jib {
    from {
        image = '{{dockerImage}}'
    }

    {{#isVroongProject}}
    extraDirectories {
        paths {
            path {
                from = file('docker/newrelic')
                into = '/newrelic'
            }
            path {
                from = file('docker/jmx-exporter')
                into = '/jmx-exporter'
            }
        }
    }
    {{/isVroongProject}}

    to {
        image = "${project.name}"
        tags = ['latest', "${project.version}".toString(), getGitHash()]
    }

    // If set to packaged, puts the JAR artifact built by the Gradle Java plugin into the final image.
    // If set to exploded (default), containerizes individual .class files and resources files.
    containerizingMode = 'packaged'

    container {
        jvmFlags = [
                {{^isJava8}}
                // Java9 container support @see https://www.eclipse.org/openj9/docs/xxusecontainersupport/
                '-XX:+UseContainerSupport',
                {{/isJava8}}
                // for G1GC @see https://www.oracle.com/technical-resources/articles/java/g1gc.html
                '-XX:+UseG1GC',
                '-XX:+HeapDumpOnOutOfMemoryError',
                '-XX:HeapDumpPath=/tmp',
                '-Djava.net.preferIPv4Stack=true',
                '-Duser.timezone=Asia/Seoul',
                '-Dfile.encoding=UTF8',
                '-Dsun.net.inetaddr.ttl=30',
                {{#isVroongProject}}
                '-javaagent:/newrelic/newrelic.jar',
                '-javaagent:/jmx-exporter/jmx_prometheus_javaagent-0.13.0.jar=8888:/jmx-exporter/config.yml',
                {{/isVroongProject}}
        ]
        ports = ['{{portNumber}}']
        creationTime = 'USE_CURRENT_TIMESTAMP'
    }
}

dockerCompose {
    useComposeFiles = ['docker/compose.yml']
    tcpPortsToIgnoreWhenWaiting = [1099]
}
