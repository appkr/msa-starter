plugins {
    id 'java'
    id 'idea'
    id 'org.springframework.boot' version "${springBootVersion}"
    id 'io.spring.dependency-management' version "${springDependencyManagementVersion}"
    id 'com.gorylenko.gradle-git-properties' version "${gitPropertiesVersion}"
    id 'com.google.cloud.tools.jib' version "${jibVersion}"
    id 'org.openapi.generator' version "${openapiGeneratorVersion}"
    id 'com.rivancic.asyncapi-gradle-plugin' version "${asyncapiGeneratorVersion}"
    id 'io.freefair.lombok' version "${lombokVersion}"
    id 'com.github.ben-manes.versions' version "${versionManagerVersion}"
    id 'com.avast.gradle.docker-compose' version "${dockerComposeVersion}"
    id 'com.diffplug.spotless' version "${spotlessVersion}"
}

apply from: 'gradle/docker.gradle'
apply from: 'gradle/swagger.gradle'

group = '{{groupName}}'
version = project.version
sourceCompatibility = '{{javaVersion}}'

repositories {
    {{#isVroongProject}}
    maven {
        url 'https://nexus.mm.meshkorea.net/repository/maven-public/'

        credentials {
            username repoUser
            password repoPass
        }
    }
    {{/isVroongProject}}
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
}

dependencies {

    /**
     * BOM, dependency management
     */

    implementation platform("org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}")
    implementation platform("org.zalando:logbook-bom:${logbookVersion}")
    implementation platform("io.sentry:sentry-bom:${sentryVersion}")

    /**
     * Global utilities
     */

    implementation 'org.apache.commons:commons-lang3:3.10'
    annotationProcessor('org.springframework.boot:spring-boot-configuration-processor') {
        exclude group: 'com.vaadin.external.google', module: 'android-json'
    }
    implementation "org.mapstruct:mapstruct:${mapstructVersion}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"

    /**
     * Inbound adapters
     */

    // web
    implementation('org.springframework.boot:spring-boot-starter-web') {
        exclude module: 'spring-boot-starter-tomcat'
    }
    implementation 'org.springframework.boot:spring-boot-starter-undertow'

    // open-api-spec support packages
    implementation 'io.springfox:springfox-swagger2:3.0.0'
    implementation "org.openapitools:jackson-databind-nullable:${jacksonNullableVersion}"
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-hibernate5-jakarta'
    // OpenApi Bug workaround @see https://github.com/OpenAPITools/openapi-generator/issues/3668
    // For spring-boot 3 @see https://github.com/OpenAPITools/openapi-generator/pull/14402/files#diff-a69d7ddda55ae7f9f544bf415c96590ff4bfe3ecd52b49e519842eaac2b4f045L131
    implementation "io.swagger.core.v3:swagger-annotations:${swaggerAnnotationsVersion}"

    // object validation
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // scheduler lock @see https://github.com/lukas-krecan/ShedLock
    implementation "net.javacrumbs.shedlock:shedlock-spring:${shedlockVersion}"
    implementation "net.javacrumbs.shedlock:shedlock-provider-jdbc-template:${shedlockVersion}"

    /**
     * Outbound adapters
     */

    // jpa & database drivers
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    compileOnly 'org.hibernate.orm:hibernate-jpamodelgen:6.1.7.Final'
    annotationProcessor 'org.hibernate.orm:hibernate-jpamodelgen:6.1.7.Final'
    runtimeOnly 'com.mysql:mysql-connector-j'
    testRuntimeOnly 'com.h2database:h2'

    // querydsl
    implementation "com.querydsl:querydsl-jpa:${queryDslVersion}:jakarta"
    annotationProcessor "com.querydsl:querydsl-apt:${queryDslVersion}:jakarta"
    annotationProcessor 'jakarta.annotation:jakarta.annotation-api'
    annotationProcessor 'jakarta.persistence:jakarta.persistence-api'

    // messaging
    implementation 'org.springframework.cloud:spring-cloud-stream'
    implementation 'org.springframework.cloud:spring-cloud-stream-binder-kafka'
    testImplementation 'org.springframework.cloud:spring-cloud-stream-test-support'

    /**
     * Microservice patterns
     */

    // 헬스체크 패턴
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    // 로깅 및 추적 패턴
    implementation 'io.micrometer:micrometer-tracing'
    implementation 'io.micrometer:micrometer-tracing-bridge-brave'

    // sentry
    // @see https://docs.sentry.io/platforms/java/guides/logback/
    implementation 'io.sentry:sentry-logback'
    implementation 'io.sentry:sentry-spring-boot-starter-jakarta'

    // logback extension
    implementation "net.logstash.logback:logstash-logback-encoder:${logstashLogbackEncoderVersion}"
    implementation 'ch.qos.logback.contrib:logback-json-classic:0.1.5'

    // logbook - http request & response logging
    // @see https://github.com/zalando/logbook
    implementation 'org.zalando:logbook-spring-boot-starter'

    // 보안 패턴

    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    testImplementation 'org.springframework.security:spring-security-test'

    /**
     * Test
     */

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
        exclude group: 'com.vaadin.external.google', module: 'android-json'
    }
    testImplementation "com.tngtech.archunit:archunit-junit5-api:${archunitVersion}"
    testRuntimeOnly "com.tngtech.archunit:archunit-junit5-engine:${archunitVersion}"
}

if (!org.gradle.internal.os.OperatingSystem.current().isWindows()) {
    processResources {
        filesMatching(['**/application.yaml']) {
            filter {
                it.replace('#project.version#', version)
            }
        }
    }
}

compileJava {
    options.compilerArgs = [
            '-Amapstruct.suppressGeneratorTimestamp=true',
            '-Amapstruct.suppressGeneratorVersionInfoComment=true',
            '-Amapstruct.unmappedTargetPolicy=IGNORE'
    ]
}

test {
    useJUnitPlatform()
    systemProperty('spring.profiles.active', 'test')
    systemProperty('user.timezone', 'Asia/Seoul')
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

spotless {
    encoding 'UTF-8'
    java {
        targetExclude('**/generated/**', "**/build/**")
        importOrder()
        removeUnusedImports()
        endWithNewline()
    }
}

compileJava.dependsOn('spotlessApply')
